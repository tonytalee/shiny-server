shiny::runApp()
library(grid)
library(fitdistrplus)
library(qqplotr)
library(Rmisc)
library(broom)
library(plotly)
library(formattable)
library(kableExtra)
library(knitr)
library(shinydashboard)
library(DBI)
library(RSQLite)
library(DT)
library(cowplot)
library(shinyjs)
library(lubridate)
library(scales)
library(tidyverse)
library(setGplot)
library(ProcessCapability)
library(spcChart)
library(qcc)
theme_set(theme_bw())
tz <- "Asia/Taipei"
Sys.setenv(TZ = tz)
source(file.path("R_codes", "helpers.R"))
#============
load(file = "./Data/data_demo.RData")
names(data_demo)
chart_types <- c("Xbar-R", "Xbar-mR-R", "u", "p")
Chart_type <- "Xbar-R"
data <- data_demo[[Chart_type]]
rm(data)
dfx <- data_demo[[Chart_type]]$data
iu <- data_demo[[Chart_type]]$iu
pCtrl <- data_demo[[Chart_type]]$pCtrl
# setting
subgroup = c("Lot", "Stage"); data = dfx$Value; xVar= "DTime"; color_var= NULL
df_info = select(dfx, Lot, Product, Stage, Machine_id, DTime)
info_names = c("lot", "product", "stage", "machine id", "time")
if (Chart_type %in% c("p", "np", "c", "u")) size = dfx$Size
#--- SPC chart -----
switch (Chart_type,
"Xbar-R" = Xbar_R(pCtrl, subgroup, data, df_info, xVar, info_names),
"Xbar-mR-R" = Xbar_mR_R(pCtrl, subgroup, data, df_info, xVar, info_names),
"p" = p_chart(pCtrl, subgroup, data, size, df_info, xVar, info_names, ppm= T),
"np" = np_chart(pCtrl, subgroup, data, size, df_info, xVar, info_names),
"u" = u_chart(pCtrl, subgroup, data, size, df_info, xVar, info_names, iu= iu),
"c" = c_chart(pCtrl, subgroup, data, size, df_info, xVar, info_names)
)
#--- Process capability -----
# normal distribution
x <- dfx$Value
subgroup <- dfx$Lot
info <- select(df_info, Lot, Stage)
USL = pCtrl$USL; target = pCtrl$CS; LSL = pCtrl$LSL
procap <- fun_proCap_norm_plot(x, subgroup, USL= USL, target= target, LSL= LSL, df_info = info,
info_names = c("Lot", "Stage"))
df_pro <- procap$sample_statistic
df_pro
shiny::runApp()
runApp('~/SightingData/shiny-server/demo')
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp('~/OneDrive/WorkDrive')
runApp()
shiny::runApp()
runApp()
fun_proCap_binom_plot
runApp()
remove.packages('ProcessCapability')
install.packages("~/OneDrive/WorkDrive/R/R_package_dev/ProcessCapability_0.1.1.tar.gz", repos = NULL, type = "source")
shiny::runApp()
library(grid)
library(fitdistrplus)
library(qqplotr)
library(Rmisc)
library(broom)
library(plotly)
library(formattable)
library(kableExtra)
library(knitr)
library(shinydashboard)
library(DBI)
library(RSQLite)
library(DT)
library(cowplot)
library(shinyjs)
library(lubridate)
library(scales)
library(ggplot2)
library(tidyr)
library(dplyr)
library(stringr)
library(setGplot)
library(ProcessCapability)
library(spcChart)
library(qcc)
library(shinydashboard)
box
shiny::runApp()
library(shinydashboard)
rm(box)
runApp()
validate
library(shinydashboard)
shiny::runApp()
runApp()
shiny::runApp()
0.9375*1.5
runApp()
Plotly_spc
Xbar_mR_R()
Xbar_mR_R
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
